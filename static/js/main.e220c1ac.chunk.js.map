{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filterdRobot","this","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOA0BgBA,EAxBF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAK3B,OAEQ,yBAAKC,UAAU,+CAET,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,cACrB,6BACI,4BAAKF,GACL,2BAAIC,GACJ,2BAAIC,MCcPI,EAtBC,SAAC,GAAe,IAAbC,EAAY,EAAZA,OAIZC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GAEvC,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EAAGT,GAAIK,EAAOI,GAAGT,GAAIF,KAAMO,EAAOI,GAAGX,KAAOC,MAAOM,EAAOI,GAAGV,WAGjF,OAED,6BACIO,ICMUK,EAtBG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAGhC,OAEC,yBAAKZ,UAAU,OAEX,2BAEHA,UAAU,mCACPa,KAAK,SACLC,YAAa,gBAEbC,SAAUH,MCsFCI,G,wDA9Ed,aAAe,IAAD,8BAEX,gBA6BHC,eAAiB,SAACC,GAEhB,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,SA9BrC,EAAKC,MAAO,CAEblB,OAAQ,GACRO,YAAa,IANJ,E,gEAeM,IAAD,OAEnBY,MAAM,8CAA8CC,MAAK,SAAAC,GAExD,OAAOA,EAASC,UAGhBF,MAAK,SAAAG,GACF,EAAKR,SAAS,CAACf,OAAQuB,S,+BAkBnB,IAAD,OAGAC,EAAcC,KAAKP,MAAMlB,OAAO0B,QAAO,SAAAC,GAC3C,OAAOA,EAAMlC,KAAKmC,cAAcC,SAAS,EAAKX,MAAMX,YAAYqB,kBAOnE,OAAiC,IAA7BH,KAAKP,MAAMlB,OAAO8B,OAEd,yCAKL,yBAAKlC,UAAU,MAEf,wBAAIA,UAAU,cAAd,iBACA,kBAAC,EAAD,CAAWY,aAAciB,KAAKZ,iBAE9B,gCAGE,kBAAC,EAAD,CAAUb,OAAQwB,U,GArENO,cCVAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCANC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEA,kBAAC,EAAD,OAGAC,SAASC,eAAe,SD2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e220c1ac.chunk.js","sourcesContent":["\timport React from 'react';\r\n\r\n\tconst Card = ({name, email, id }) => {\r\n\r\n\t\t// className: we use className kuz we have techyons tht like Bootstrap\r\n\t\t// bg: backGround= green, dib: deapth, br: is border, pad3: padding, ma2: margen, grow is Enmation\r\n        // we want to be random using ${props.id}\r\n\t\treturn(\r\n\t        \r\n\t\t        <div className='bg-green dib br2 pad3 ma2 grow bw2 shadow-5'>\r\n\t          \r\n\t\t              <img alt='robot' src={`https://robohash.org/${id}?200x200`}/>\r\n\t              <div>\r\n\t                  <h2>{name}</h2>\r\n\t                  <p>{email}</p>\r\n\t                  <p>{id}</p>\r\n\t                 \r\n\t              </div>\r\n\r\n\r\n\t\t\t     </div>\r\n\r\n\r\n\t\t\t);\r\n\t}\r\n\r\n\texport default Card;","// this is will allow ur Server run and bundel\r\nimport React from 'react'\r\nimport Card from './Card.js';\r\n\r\n\r\n// key={i} is like every I and must be there\r\n// map function is like loop wihtout of return.\r\nconst CardList = ({ robots}) => {\r\n\r\n\r\n\r\n\t\tconst cardComponent = robots.map((user, i) => {\r\n\r\n\t\t\treturn (<Card key={i} id={robots[i].id} name={robots[i].name } email={robots[i].email }/>);\r\n\t\t})\r\n\r\n\t\treturn(\r\n\t        \r\n\t<div>\r\n    {cardComponent}\r\n    </div>\r\n\r\n\t);\r\n\r\n}\r\n\r\n\t\r\n\t\r\n\r\n\texport default CardList;\r\n","import React from 'react';\r\n\r\n// how u pass  search field and change from App class there \r\nconst SearchBox = ({searchField, searchChange}) => {\r\n\r\n\r\n\treturn (\r\n\r\n\t <div className='pa2'>\r\n\r\n      <input \r\n\r\n\t  className='pa3 ba b--green bg-lightest-blue'\r\n      type='search' \r\n      placeholder= 'search robots'\r\n\r\n      onChange={searchChange}\r\n      />\r\n\r\n\r\n      </div>\r\n\r\n  );\r\n}\r\n\r\nexport default SearchBox;","  // App is parnets class and carlist and card and robots are childern\r\n\r\n  import React, {Component} from 'react';\r\n\r\n  import CardList from '../Components/CardList.js';\r\n\r\n\r\n  import SearchBox from '../Components/SearchBox.js';\r\n  import './App.css';\r\n  import scroll from '../Components/scroll.js';\r\n\r\n\r\n  // Detemenstic: mean ig u give input will return same in ouput but not determenstic is will give different\r\n  // STATE: is object Or cuurnt node u vsite so that u able to communicte betweeb 2 coppmants such searchbox commuincate with Cartlist\r\n  // Example of State: https://tkssharma.gitbook.io/react-training/day-01/react-js-3-principles/one-way-data-flow\r\n  // Remmver Props are: input Detemenstic\r\n\r\n\r\n  //Remmber state is where is child Node and must  send to mother which is App class and then App will send it to other childersn or components\r\n\r\n  // we can add state to class using constructor\r\n\r\n  class App extends Component {\r\n\r\n  \tconstructor() {\r\n\r\n  \t   super()\r\n         this.state= {\r\n\r\n       \trobots: [],\r\n       \tsearchField: ''\r\n        }\r\n\r\n  \t}\r\n\r\n\r\n  // Using Rest Api (Json PlaceHolder): Search on google React State and Lifecycle\r\n  // Fetch : is send request and get Response form the Server.\r\n\r\n  componentDidMount() {\r\n\r\n  \tfetch('https://jsonplaceholder.typicode.com/users').then(response => {\r\n\r\n  \t\treturn response.json();\r\n  \t})\r\n\r\n  \t.then(users => {\r\n       this.setState({robots: users});\r\n\r\n  \t})\r\n      \r\n    }\r\n\r\n\r\n  // creating a fucntion called onSearchEvent, this if in searchbox input give then we will get event\r\n   onSearchChange = (event) => {\r\n     \r\n     this.setState({searchField: event.target.value})\r\n\r\n   \r\n\r\n   }\r\n\r\n\r\n  // we pass oneSearchChange to searchBox\r\n  render(){\r\n\r\n\r\n    const filterdRobot= this.state.robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n\r\n     })\r\n\r\n\r\n  // this is incase Json slow and not load fast from fetch request : then use this trcik!\r\n\r\n   if (this.state.robots.length === 0){\r\n\r\n   \treturn <h1> Loading </h1>\r\n   }else{\r\n\r\n    return(\r\n\r\n      <div className='tc'>\r\n\r\n      <h1 className='f1 tl pa3 '> RoboFriends </h1>\r\n      <SearchBox searchChange={this.onSearchChange}/>\r\n\r\n      <scroll>\r\n\r\n        \r\n        <CardList robots={filterdRobot}/>\r\n    \r\n       </scroll>\r\n\r\n      </div>\r\n\r\n       );\r\n       }\r\n  }\r\n  }\r\n\r\n  export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// this is will allow ur Server run and bundel\nimport React from 'react'\n// Dom use for web\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// Card is defualt\n//import Card from './Card.js';\n// CardList is defualt\nimport App from './Containers/App.js';\n// Robots is not defualt, so we have to DeStructure it\n//import { robots } from './robots.js';\n\n\nimport * as serviceWorker from './serviceWorker';\n// Tachyons:This same as a Bootstrap\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n   \n  <App/>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}